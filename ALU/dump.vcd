$date
Wed Apr 21 10:36:17 2021
$end
$version
Riviera-PRO Version 2020.04.130.7729
$end
$timescale
1 ns
$end

$scope module LogicUnit_tb $end
$var wire 4 ! result [3:0] $end
$var reg 4 " A [3:0] $end
$var reg 4 # B [3:0] $end
$var reg 2 $ alu_control [1:0] $end
$var integer 32 % i $end
$var parameter 32 & N [31:0] $end

$scope module uut $end
$var wire 4 ' A [3:0] $end
$var wire 4 ( B [3:0] $end
$var wire 1 ) sum [3] $end
$var wire 1 * sum [2] $end
$var wire 1 + sum [1] $end
$var wire 1 , sum [0] $end
$var wire 2 - alu_control [1:0] $end
$var wire 4 ! result [3:0] $end
$var reg 4 . result1 [3:0] $end
$var parameter 32 / N [31:0] $end

$scope module inst $end
$var wire 1 0 A [3] $end
$var wire 1 1 A [2] $end
$var wire 1 2 A [1] $end
$var wire 1 3 A [0] $end
$var wire 1 4 B [3] $end
$var wire 1 5 B [2] $end
$var wire 1 6 B [1] $end
$var wire 1 7 B [0] $end
$var wire 2 - alu_control [1:0] $end
$var wire 1 ) sum [3] $end
$var wire 1 * sum [2] $end
$var wire 1 + sum [1] $end
$var wire 1 , sum [0] $end
$var wire 1 8 carry [3] $end
$var wire 1 9 carry [2] $end
$var wire 1 : carry [1] $end
$var wire 1 ; carry [0] $end
$var wire 1 < carry_out $end
$var parameter 32 = N [31:0] $end

$scope module ut $end
$var wire 1 > B $end
$var wire 2 - alu_control [1:0] $end
$var wire 1 ? B_bar $end
$var reg 1 @ mux_out $end
$upscope $end


$scope begin generate_N_bit_Adder[0] $end
$var parameter 32 A i [31:0] $end

$scope begin genblk1 $end

$scope module inst_1 $end
$var wire 1 3 A $end
$var wire 1 7 B $end
$var wire 1 , sum $end
$var wire 1 ; carry_out $end
$upscope $end

$upscope $end

$upscope $end


$scope begin generate_N_bit_Adder[1] $end
$var parameter 32 B i [31:0] $end

$scope begin genblk1 $end

$scope module inst_2 $end
$var wire 1 3 A $end
$var wire 1 7 B $end
$var wire 1 ; carry_in $end
$var wire 1 + sum $end
$var wire 1 : carry_out $end

$scope module u1 $end
$var wire 1 3 A $end
$var wire 1 7 B $end
$var wire 1 + sum $end
$var wire 1 : carry_out $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin generate_N_bit_Adder[2] $end
$var parameter 32 C i [31:0] $end

$scope begin genblk1 $end

$scope module inst_2 $end
$var wire 1 3 A $end
$var wire 1 7 B $end
$var wire 1 : carry_in $end
$var wire 1 * sum $end
$var wire 1 9 carry_out $end

$scope module u1 $end
$var wire 1 3 A $end
$var wire 1 7 B $end
$var wire 1 * sum $end
$var wire 1 9 carry_out $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end


$scope begin generate_N_bit_Adder[3] $end
$var parameter 32 D i [31:0] $end

$scope begin genblk1 $end

$scope module inst_2 $end
$var wire 1 3 A $end
$var wire 1 7 B $end
$var wire 1 9 carry_in $end
$var wire 1 ) sum $end
$var wire 1 8 carry_out $end

$scope module u1 $end
$var wire 1 3 A $end
$var wire 1 7 B $end
$var wire 1 ) sum $end
$var wire 1 8 carry_out $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b0 !
b0 "
b0 #
b0 $
b0 %
b100 &
b0 '
b0 (
x)
x*
x+
x,
b0 -
b0 .
b100 /
z0
z1
z2
z3
z4
z5
z6
z7
x8
x9
x:
x;
x<
b100 =
z>
x?
z@
b0 A
b1 B
b10 C
b11 D
$end
#100
b10 "
b1 #
b1 (
b10 '
b11 .
b11 !
#400
b1 %
b1 $
b1 -
x@
x7
b1 .
b1 !
#800
b10 %
b10 $
b10 -
b0 .
b0 !
#1200
b11 %
b11 $
b11 -
b11 .
b11 !
#1600
b100 %
